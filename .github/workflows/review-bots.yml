name: Review Bots Analysis

on:
  pull_request:
    branches: [main, preview]
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]

jobs:
  review-bots:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      statuses: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Review Bots
      run: |
        # Check if legacy directory exists
        if [ -d "legacy/review-bots" ]; then
          cd legacy/review-bots
          npm install
          chmod +x bin/*.js
          # The 'npm link' command is not suitable for CI/CD environments as it creates global symlinks.
          # Instead, we'll rely on the 'npm install' in the 'review-bots' directory to make the binaries available
          # within the local 'node_modules/.bin' which is typically in the PATH for npm scripts.
          # For direct execution in the workflow, we'll use the full path or ensure it's in the PATH.
          
          # Verify installation by checking if the binaries exist in node_modules/.bin
          ls -l node_modules/.bin/hater-bot || echo "hater-bot not found in node_modules/.bin"
          ls -l node_modules/.bin/white-knight-bot || echo "white-knight-bot not found in node_modules/.bin"
          ls -l node_modules/.bin/balance-bot || echo "balance-bot not found in node_modules/.bin"
        else
          echo "‚ö†Ô∏è legacy/review-bots directory not found - skipping review bots"
          echo "This is expected for branches removing legacy code"
          exit 0
        fi
    
    - name: Get Changed Files
      id: changed-files
      uses: tj-actions/changed-files@v41
      with:
        separator: ','
        quotepath: false
    
    - name: Run Review Bots on Changed Files
      if: steps.changed-files.outputs.all_changed_files != ''
      run: |
        # Convert comma-separated list to space-separated for the CLI
        IFS=',' read -ra FILES <<< "${{ steps.changed-files.outputs.all_changed_files }}"
        
        # Filter out deleted files and non-reviewable files
        REVIEWABLE_FILES=""
        for file in "${FILES[@]}"; do
          if [[ -f "$file" ]] && [[ "$file" =~ \.(js|ts|jsx|tsx|md|json|sh)$ ]]; then
            REVIEWABLE_FILES="$REVIEWABLE_FILES $file"
          fi
        done
        
        if [[ -n "$REVIEWABLE_FILES" ]]; then
          echo "Files to review: $REVIEWABLE_FILES"
          
          # Prefix each file with ../../ for relative paths from legacy/review-bots directory
          PREFIXED_FILES=""
          for file in $REVIEWABLE_FILES; do
            PREFIXED_FILES="$PREFIXED_FILES ../../$file"
          done
          
          # Check if we can run bots
          if [ -d "legacy/review-bots" ]; then
            # Run all three bots and save outputs
            echo "Running hater-bot..."
            cd legacy/review-bots && node bin/hater-bot.js $PREFIXED_FILES --output ../../hater-report.md --no-color || echo "Hater bot failed"
            cd ../..
            
            echo "Running white-knight-bot..."
            cd legacy/review-bots && node bin/white-knight-bot.js $PREFIXED_FILES --output ../../knight-report.md --no-color || echo "White knight bot failed"
            cd ../..
            
            echo "Running balance-bot..."
            cd legacy/review-bots && node bin/balance-bot.js $PREFIXED_FILES --output ../../balance-report.md --no-color || echo "Balance bot failed"
            cd ../..
          else
            echo "Review bots not available - creating placeholder report"
            echo "# Review Bots Not Available" > combined-report.md
            echo "" >> combined-report.md
            echo "The review bots are not available in this branch." >> combined-report.md
            echo "This is expected for branches that remove legacy code." >> combined-report.md
            cp combined-report.md /tmp/review-report.md
            exit 0
          fi
          
          # Combine reports
          echo "# ü§ñ Review Bots Analysis" > combined-report.md
          echo "" >> combined-report.md
          echo "Automated code review by three different perspectives:" >> combined-report.md
          echo "" >> combined-report.md
          
          if [[ -f "hater-report.md" ]]; then
            echo "## üò§ Hater Bot Says:" >> combined-report.md
            echo "<details>" >> combined-report.md
            echo "<summary>Click to see all criticisms</summary>" >> combined-report.md
            echo "" >> combined-report.md
            tail -n +2 hater-report.md >> combined-report.md
            echo "" >> combined-report.md
            echo "</details>" >> combined-report.md
            echo "" >> combined-report.md
          fi
          
          if [[ -f "knight-report.md" ]]; then
            echo "## üõ°Ô∏è White Knight Bot Says:" >> combined-report.md
            echo "<details>" >> combined-report.md
            echo "<summary>Click to see all defenses</summary>" >> combined-report.md
            echo "" >> combined-report.md
            tail -n +2 knight-report.md >> combined-report.md
            echo "" >> combined-report.md
            echo "</details>" >> combined-report.md
            echo "" >> combined-report.md
          fi
          
          if [[ -f "balance-report.md" ]]; then
            echo "## ‚öñÔ∏è Balance Bot Says (RECOMMENDED):" >> combined-report.md
            echo "" >> combined-report.md
            tail -n +2 balance-report.md >> combined-report.md
          fi
          
          # Save report for next step
          cp combined-report.md /tmp/review-report.md
        else
          echo "No reviewable files found in changes"
          echo "# ü§ñ Review Bots Analysis" > /tmp/review-report.md
          echo "" >> /tmp/review-report.md
          echo "No reviewable code files were found in this PR." >> /tmp/review-report.md
        fi
    
    - name: Post Review Comment
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const reportPath = '/tmp/review-report.md';
          
          let comment = '# ü§ñ Review Bots Analysis\n\nUnable to generate review report.';
          
          if (fs.existsSync(reportPath)) {
            comment = fs.readFileSync(reportPath, 'utf8');
            
            // Truncate if too long for GitHub comment
            const maxLength = 65000;
            if (comment.length > maxLength) {
              comment = comment.substring(0, maxLength) + '\n\n... (truncated due to length)';
            }
          }
          
          // Check if we already commented
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('ü§ñ Review Bots Analysis')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }
    
    - name: Set Status Check
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          // Read the balance bot report to determine status
          const fs = require('fs');
          let status = 'success';
          let description = 'All bots have reviewed the code';
          
          const balanceReport = 'balance-report.md';
          if (fs.existsSync(balanceReport)) {
            const content = fs.readFileSync(balanceReport, 'utf8');
            
            // Check for critical issues in balance bot report
            if (content.includes('CRITICAL - Fix Immediately')) {
              status = 'failure';
              description = 'Critical issues found - see review comments';
            } else if (content.includes('HIGH - Fix This Week')) {
              // High priority issues are warnings, not failures
              status = 'success';
              description = 'High priority issues found (non-blocking) - see review comments';
            }
          }
          
          // Set the status
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.payload.pull_request.head.sha,
            state: status,
            description: description,
            context: 'Review Bots Analysis'
          });